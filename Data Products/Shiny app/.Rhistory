source('D:/Coursera/installPackagesR.R')
install.packages("shiny")
install.packages("dplyr")
source('D:/Coursera/installPackagesR.R')
require(devtools)
require(Rtools)
require(shiny)
require(googleVis)
require(knitr)
require(ggplot2)
require(slidify)
require(kernlab)
require(caret)
require(ISLR)
require(AppliedPredictiveModeling)
require(ElemStatLearn)
require(pgmm)
require(rpart)
require(rpart.plot)
require(rattle)
require(pROC)
require("dplyr")
require("readr")
require("tidyr")
require("magrittr")
require("rCharts")
require(shiny)
library("shiny", lib.loc="~/R/win-library/3.2")
detach("package:shiny", unload=TRUE)
install_github('ramnathv/rCharts')
require("rCharts")
library("shiny", lib.loc="~/R/win-library/3.2")
install.packages("caTools")
install.packages("caTool")
data(movies)
library(ggplot2)
data(movies)
max(movies[, "budget"])
head(movies)
max(movies[,"length"])
max(movies[,"length"] < 1000)
is.numeric(movies$Action)
is.numeric(movies$title)
is.numeric(movies$mpaa)
movies[, "year"] > 2000)
movies[, "year"] > 2000
library(ggplot2)
data(movies)
max(movies$budget)
max(movies$budget, na.rm = T)
maxbud <- max(movies$budget, na.rm = T)
movies[movies$budget == maxbud,]
which(movies$budget == maxbud)
movies[which(movies$budget == maxbud),]
summary(movies)
op <- summary(movies)
op$year$min
typeof(op)
data(movies)
library(ggplot2)
library(rCharts)
data(movies)
hist(ratings, breaks = 10, data = movies)
names(movies)
hist(rating, breaks = 10, data = movies)
hist(movies$rating, breaks = 10)
hist(movies$rating, breaks = 10, freq = TRUE, col = "lightgreen")
hist(movies$rating, breaks = 10, freq = F, col = "lightgreen", labels = TRUE)
hist(movies$rating, breaks = 10, freq = F, col = "lightgreen")
hist(movies$rating, breaks = 10, freq = F, col = "lightblue", title = "Histogram of movies rating", title = "Histogram of movies rating")
hist(movies$rating, breaks = 10, freq = F, col = "lightblue", title = "Histogram of movies rating", main = "Histogram of movies rating")
plot(movies$length, movies$rating)
plot(movies$length, movies$rating, col = title)
plot(movies$length, movies$rating, col = movies$title)
plot(movies$length, movies$rating)
install.packages("chron")
ggplot(movies, aes(x = length, y = rating, group = 0))+
geom_point(aes(colour = title), size = 4)
ggplot(movies, aes(x = length, y = rating, group = 0))
ggplot(movies, aes(x = length, y = rating, group = 0))+
geom_point( size = 4)
df <- movies[(movies$length < 500),]
ggplot(movies, aes(x = length, y = rating, group = 0))+
geom_point( size = 4)
df <- movies[(movies$length < 500),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( size = 4)
df <- movies[(movies$length < 200),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( size = 4)
df <- movies[(movies$length < 200),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( aes(colour = title),size = 4)
df <- movies[(movies$length < 200),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( colour=alpha("blue", 1/10),size = 4)
df <- movies[(movies$length < 200),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( colour=alpha("blue", 1/10))
library(ggplot2)
df <- movies[(movies$length < 200),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( colour=alpha("blue", 1/10))
df <- movies[(movies$length < 200),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( aes(colour="lightblue")) #alpha("blue", 1/10)
df <- movies[(movies$length < 200),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( colour="lightblue")
df <- movies[(movies$length < 200),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( colour=alpha("lightblue", 0.1))
df <- movies[(movies$length < 200),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( colour = "lightblue", alpha = 0.1)
df <- movies[(movies$length < 200),]
ggplot(df, aes(x = length, y = rating, group = 0))+
geom_point( colour = "lightblue", alpha = 0.1, size = 4)
setwd("D:/GitHub/datasciencecoursera/Data Products/Shiny app")
system(R -e "shiny::runApp()")
system(R -e shiny::runApp())
shiny::runApp()
